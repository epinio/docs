"use strict";(self.webpackChunkepinio_docusaurus=self.webpackChunkepinio_docusaurus||[]).push([[95173],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return g}});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),d=c(n),g=r,f=d["".concat(l,".").concat(g)]||d[g]||u[g]||a;return n?o.createElement(f,i(i({ref:t},s),{},{components:n})):o.createElement(f,i({ref:t},s))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},30922:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return u}});var o=n(83117),r=n(80102),a=(n(67294),n(3905)),i=["components"],p={sidebar_label:"Debugging an application",sidebar_position:4,title:"Debugging an application",description:"How to debug an Epinio application.",keywords:["epinio","kubernetes","application debugging"],"doc-type":["how-to"],"doc-topic":["epinio","how-to","use-develop","debug"],"doc-persona":["epinio-developer","epinio-operator"]},l=void 0,c={unversionedId:"howtos/use-develop/debug",id:"howtos/use-develop/debug",title:"Debugging an application",description:"How to debug an Epinio application.",source:"@site/docs/howtos/use-develop/debug.md",sourceDirName:"howtos/use-develop",slug:"/howtos/use-develop/debug",permalink:"/next/howtos/use-develop/debug",draft:!1,editUrl:"https://github.com/epinio/docs/edit/main/docs/howtos/use-develop/debug.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"Debugging an application",sidebar_position:4,title:"Debugging an application",description:"How to debug an Epinio application.",keywords:["epinio","kubernetes","application debugging"],"doc-type":["how-to"],"doc-topic":["epinio","how-to","use-develop","debug"],"doc-persona":["epinio-developer","epinio-operator"]},sidebar:"docs",previous:{title:"Recovering applications after CRD cycling",permalink:"/next/howtos/use-develop/app_recover"},next:{title:"Install WordPress with Epinio",permalink:"/next/howtos/use-develop/install_wordpress_application"}},s={},u=[{value:"Java",id:"java",level:2},{value:"Node",id:"node",level:2}],d={toc:u};function g(e){var t=e.components,n=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"java"},"Java"),(0,a.kt)("p",null,"To debug a Java application you have to set the\n",(0,a.kt)("a",{parentName:"p",href:"https://paketo.io/docs/howto/java/#enable-remote-debugging"},(0,a.kt)("inlineCode",{parentName:"a"},"BPL_DEBUG_ENABLED"))," environment variable to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),".\nYou can do this with the Epinio CLI ",(0,a.kt)("inlineCode",{parentName:"p"},"app env set")," command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"epinio app env set samplejava BPL_DEBUG_ENABLED true\n")),(0,a.kt)("p",null,"After the application has restarted (to integrate the change of the environment),\nuse ",(0,a.kt)("a",{parentName:"p",href:"/next/howtos/other/port_forwarding"},"port forwarding")," to attach the debugger.\nIt runs by default on the port ",(0,a.kt)("inlineCode",{parentName:"p"},"8000"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"epinio app port-forward sample 8000:8000\n")),(0,a.kt)("p",null,"This forwards the traffic coming from ",(0,a.kt)("inlineCode",{parentName:"p"},"localhost:8000")," to the remote ",(0,a.kt)("inlineCode",{parentName:"p"},":8000"),"."),(0,a.kt)("h2",{id:"node"},"Node"),(0,a.kt)("p",null,"To debug a Node application you need to start the application with the ",(0,a.kt)("inlineCode",{parentName:"p"},"--inspect")," flag.\nYour ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," has to be similar to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "nodejs-sample-app",\n  "version": "1.0.0",\n  "scripts": {\n    "start": "node --inspect index.js"\n  }\n}\n')),(0,a.kt)("p",null,"After deploying the application ,\nuse ",(0,a.kt)("a",{parentName:"p",href:"/next/howtos/other/port_forwarding"},"port forwarding"),"\nto attach the debugger.\nBy default, it runs on port ",(0,a.kt)("inlineCode",{parentName:"p"},"9229"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"epinio app port-forward sample 9229:9229\n")),(0,a.kt)("p",null,"This forwards the traffic coming from ",(0,a.kt)("inlineCode",{parentName:"p"},"localhost:9229")," to the remote ",(0,a.kt)("inlineCode",{parentName:"p"},":9229"),"."))}g.isMDXComponent=!0}}]);