"use strict";(self.webpackChunkepinio_docusaurus=self.webpackChunkepinio_docusaurus||[]).push([[3918],{3905:function(t,e,n){n.d(e,{Zo:function(){return d},kt:function(){return m}});var a=n(67294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,i=function(t,e){if(null==t)return{};var n,a,i={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var p=a.createContext({}),s=function(t){var e=a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},d=function(t){var e=s(t.components);return a.createElement(p.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},c=a.forwardRef((function(t,e){var n=t.components,i=t.mdxType,r=t.originalType,p=t.parentName,d=o(t,["components","mdxType","originalType","parentName"]),c=s(n),m=i,k=c["".concat(p,".").concat(m)]||c[m]||u[m]||r;return n?a.createElement(k,l(l({ref:e},d),{},{components:n})):a.createElement(k,l({ref:e},d))}));function m(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var r=n.length,l=new Array(r);l[0]=c;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o.mdxType="string"==typeof t?t:i,l[1]=o;for(var s=2;s<r;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},33296:function(t,e,n){n.r(e),n.d(e,{assets:function(){return d},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return u}});var a=n(83117),i=n(80102),r=(n(67294),n(3905)),l=["components"],o={title:"Customization point: Staging scripts",sidebar_label:"Staging scripts",description:"Using staging scripts with Epinio.",keywords:["epinio","application development","staging scripts","kubernetes"]},p="Customization point: Staging Scripts",s={unversionedId:"references/customization/staging-scripts",id:"version-1.11.0/references/customization/staging-scripts",title:"Customization point: Staging scripts",description:"Using staging scripts with Epinio.",source:"@site/versioned_docs/version-1.11.0/references/customization/staging-scripts.md",sourceDirName:"references/customization",slug:"/references/customization/staging-scripts",permalink:"/references/customization/staging-scripts",draft:!1,editUrl:"https://github.com/epinio/docs/edit/main/versioned_docs/version-1.11.0/references/customization/staging-scripts.md",tags:[],version:"1.11.0",frontMatter:{title:"Customization point: Staging scripts",sidebar_label:"Staging scripts",description:"Using staging scripts with Epinio.",keywords:["epinio","application development","staging scripts","kubernetes"]},sidebar:"docs",previous:{title:"Source Code Storage",permalink:"/references/customization/sources"},next:{title:"Buildpacks",permalink:"/references/customization/staging"}},d={},u=[{value:"Overview",id:"overview",level:2},{value:"Specification",id:"specification",level:2},{value:"Staging script API, Download",id:"staging-script-api-download",level:3},{value:"Staging script API, Unpack",id:"staging-script-api-unpack",level:3},{value:"Staging script API, Build",id:"staging-script-api-build",level:3},{value:"Search",id:"search",level:2}],c={toc:u};function m(t){var e=t.components,n=(0,i.Z)(t,l);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"customization-point-staging-scripts"},"Customization point: Staging Scripts"),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"This customization interacts with the\n",(0,r.kt)("a",{parentName:"p",href:"/references/customization/staging"},"customization of buildpacks"),".")),(0,r.kt)("p",null,"Epinio uses staging scripts to interact with Paketo ",(0,r.kt)("a",{parentName:"p",href:"https://buildpacks.io/"},"Cloud Native Buildpacks"),"."),(0,r.kt)("p",null,"Epinio automatically selects the set of staging scripts based on the name of the chosen builder\nimage, and the images supported by a specific definition."),(0,r.kt)("p",null,"By default Epinio installs three definitions."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"One to support Bionic-based builder images (",(0,r.kt)("inlineCode",{parentName:"li"},"paketo-buildpacks/builder:*"),")."),(0,r.kt)("li",{parentName:"ol"},"One to support Jammy-based  builder images (",(0,r.kt)("inlineCode",{parentName:"li"},"paketo-buildpacks/builder-jammy-*:*"),")."),(0,r.kt)("li",{parentName:"ol"},"One to serve as fallback for any images not captured by the other two.")),(0,r.kt)("p",null,"It is this last definition which is configured when ",(0,r.kt)("a",{parentName:"p",href:"/references/customization/staging"},"customizing buildpacks"),"\nwith a different image."),(0,r.kt)("p",null,"By default this fallback is configured for Jammy-based images in general, and the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/paketo-buildpacks/builder-jammy-full"},"jammy full stack paketo builder image"),"\nin particular"),(0,r.kt)("h2",{id:"specification"},"Specification"),(0,r.kt)("p",null,"A set of staging scripts is represented by a kubernetes ConfigMap resource labeled\nwith ",(0,r.kt)("inlineCode",{parentName:"p"},"app.kubernetes.io/component: epinio-staging"),"."),(0,r.kt)("p",null,"This ConfigMap is expected to have the following keys:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Content"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"builder")),(0,r.kt)("td",{parentName:"tr",align:null},"Glob-pattern to match the image references supported by this spec.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"userID")),(0,r.kt)("td",{parentName:"tr",align:null},"User ID to run the ",(0,r.kt)("inlineCode",{parentName:"td"},"build")," script with.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"groupID")),(0,r.kt)("td",{parentName:"tr",align:null},"Group ID to run the ",(0,r.kt)("inlineCode",{parentName:"td"},"build")," script with.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"env")),(0,r.kt)("td",{parentName:"tr",align:null},"Standard environment for the scripts, YAML-formatted string, key/value map.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"base")),(0,r.kt)("td",{parentName:"tr",align:null},"Optional redirect to the actual ConfigMap with the scripts.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"build")),(0,r.kt)("td",{parentName:"tr",align:null},"Shell script to compile the unpacked sources into an image.",(0,r.kt)("br",null),"Executed using the chosen builder image")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"downloadImage")),(0,r.kt)("td",{parentName:"tr",align:null},"Container image to run the ",(0,r.kt)("inlineCode",{parentName:"td"},"download")," script with.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"download")),(0,r.kt)("td",{parentName:"tr",align:null},"Shell script to retrieve the app sources from the Epinio's S3 storage.",(0,r.kt)("br",null),"Executed using the ",(0,r.kt)("inlineCode",{parentName:"td"},"downloadImage"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"unpackImage")),(0,r.kt)("td",{parentName:"tr",align:null},"Container image to run the ",(0,r.kt)("inlineCode",{parentName:"td"},"unpack")," script with.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"unpack")),(0,r.kt)("td",{parentName:"tr",align:null},"Shell script to unpack the app sources into a directory tree.",(0,r.kt)("br",null),"Executed using the ",(0,r.kt)("inlineCode",{parentName:"td"},"unpackImage"))))),(0,r.kt)("p",null,"When ",(0,r.kt)("inlineCode",{parentName:"p"},"base")," is specified it refers to a ConfigMap which contains all the keys listed after ",(0,r.kt)("inlineCode",{parentName:"p"},"base"),"."),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"base")," and any of the keys listed after it are specified in the same resource then ",(0,r.kt)("inlineCode",{parentName:"p"},"base")," has\npriority."),(0,r.kt)("p",null,"This mechanism allows the sharing of script and image data between specifications differing only in\nthe user/group/environment required to run the ",(0,r.kt)("inlineCode",{parentName:"p"},"build")," script."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"User and group IDs, and general support for multiple staging scripts, was added because\nthe Bionic and Jammy-based builders use different numeric ids for their ",(0,r.kt)("inlineCode",{parentName:"p"},"cnb")," user."),(0,r.kt)("p",{parentName:"admonition"},"Env was added as the different builders may require different values for the ",(0,r.kt)("inlineCode",{parentName:"p"},"CNB_PLATFORM_API"),"\nenvironment variable.")),(0,r.kt)("h3",{id:"staging-script-api-download"},"Staging script API, Download"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"download")," script is executed using the ",(0,r.kt)("inlineCode",{parentName:"p"},"downloadImage")," and further configured\nwith four environment variables:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Content"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"PROTOCOL")),(0,r.kt)("td",{parentName:"tr",align:null},"S3 storage, protocol")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ENDPOINT")),(0,r.kt)("td",{parentName:"tr",align:null},"S3 storage, primary endpoint")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"BUCKET")),(0,r.kt)("td",{parentName:"tr",align:null},"S3 storage, name of bucket to read")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"BLOBID")),(0,r.kt)("td",{parentName:"tr",align:null},"S3 storage, blod id/name of app sources, in the bucket")))),(0,r.kt)("h3",{id:"staging-script-api-unpack"},"Staging script API, Unpack"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"unpack")," script is executed using the ",(0,r.kt)("inlineCode",{parentName:"p"},"unpackImage")," and further configured\nwith a single environment variable:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Content"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"BLOBID")),(0,r.kt)("td",{parentName:"tr",align:null},"blob id / file name of the app source archive to unpack")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"USERID")),(0,r.kt)("td",{parentName:"tr",align:null},"Numeric id of the ",(0,r.kt)("inlineCode",{parentName:"td"},"cnb")," user used to run the ",(0,r.kt)("inlineCode",{parentName:"td"},"build")," script")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"GROUPID")),(0,r.kt)("td",{parentName:"tr",align:null},"Numeric id of the user group used to run the ",(0,r.kt)("inlineCode",{parentName:"td"},"build")," script")))),(0,r.kt)("h3",{id:"staging-script-api-build"},"Staging script API, Build"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"build")," script is executed using the using the chosen builder image and further configured with\na two environment variables:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Content"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"PREIMAGE")),(0,r.kt)("td",{parentName:"tr",align:null},"url to the result image from a previous push")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"APPIMAGE")),(0,r.kt)("td",{parentName:"tr",align:null},"url to save the new application image under")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"USERID")),(0,r.kt)("td",{parentName:"tr",align:null},"Numeric id of the ",(0,r.kt)("inlineCode",{parentName:"td"},"cnb")," user used to run the ",(0,r.kt)("inlineCode",{parentName:"td"},"build")," script")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"GROUPID")),(0,r.kt)("td",{parentName:"tr",align:null},"Numeric id of the user group used to run the ",(0,r.kt)("inlineCode",{parentName:"td"},"build")," script")))),(0,r.kt)("p",null,"When present the ",(0,r.kt)("inlineCode",{parentName:"p"},"PREIMAGE")," is used by ",(0,r.kt)("inlineCode",{parentName:"p"},"/cnb/lifecycle/creator")," as a cache for layers,\nspeeding up compilation."),(0,r.kt)("h2",{id:"search"},"Search"),(0,r.kt)("p",null,"Epinio determines the set of staging scripts to use by glob-matching the chosen builder image (name\n",(0,r.kt)("strong",{parentName:"p"},"and")," tag) against the ",(0,r.kt)("inlineCode",{parentName:"p"},"builder")," key of all found specifications and selecting the first matching."),(0,r.kt)("p",null,"To ensure a deterministic search order the specifications are sorted lexicographically by name."),(0,r.kt)("p",null,"The exception to the above are specifications with ",(0,r.kt)("inlineCode",{parentName:"p"},'builder == "*"')," or ",(0,r.kt)("inlineCode",{parentName:"p"},'builder == ""'),".  These\nspecifications match everything and the last found is used as the fallback if and only if no other\nspecification matched."),(0,r.kt)("p",null,"If no specification matched, and no fallback was found, staging fails."))}m.isMDXComponent=!0}}]);