"use strict";(self.webpackChunkepinio_docusaurus=self.webpackChunkepinio_docusaurus||[]).push([[87971],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(h,a(a({ref:t},c),{},{components:n})):r.createElement(h,a({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},55245:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var r=n(83117),i=n(80102),o=(n(67294),n(3905)),a=["components"],s={sidebar_label:"Setting Up An External Container Registry",sidebar_position:8,title:""},l=void 0,p={unversionedId:"howtos/setup_external_registry",id:"version-1.9.0/howtos/setup_external_registry",title:"",description:"How to set up a basic external Epinio registry",source:"@site/versioned_docs/version-1.9.0/howtos/setup_external_registry.md",sourceDirName:"howtos",slug:"/howtos/setup_external_registry",permalink:"/1.9.0/howtos/setup_external_registry",draft:!1,editUrl:"https://github.com/epinio/docs/edit/main/versioned_docs/version-1.9.0/howtos/setup_external_registry.md",tags:[],version:"1.9.0",sidebarPosition:8,frontMatter:{sidebar_label:"Setting Up An External Container Registry",sidebar_position:8,title:""},sidebar:"docs",previous:{title:"Setting Up External S3 Storage",permalink:"/1.9.0/howtos/setup_external_s3"},next:{title:"Separating Application Ingress From Epinio API Server Ingress",permalink:"/1.9.0/howtos/separate_workload_ingress"}},c={},u=[{value:"How to set up a basic external Epinio registry",id:"how-to-set-up-a-basic-external-epinio-registry",level:2},{value:"Advanced setup for a secure external registry",id:"advanced-setup-for-a-secure-external-registry",level:3}],d={toc:u};function m(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"how-to-set-up-a-basic-external-epinio-registry"},"How to set up a basic external Epinio registry"),(0,o.kt)("p",null,"Epinio allows the use of an external registry for the storage of application images.\nThis can be achieved by setting the following variables during the ",(0,o.kt)("inlineCode",{parentName:"p"},"helm install"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"helm install \\\n  --set containerregistry.enabled=false \\\n  --set global.registryURL=$REGISTRY_URL \\\n  --set global.registryNamespace=$REGISTRY_NAMESPACE \\\n  --set global.registryUsername=$REGISTRY_USER \\\n  --set global.registryPassword=$REGISTRY_PASSWORD \\\n  ... (other options here) \\\n  epinio epinio/epinio\n")),(0,o.kt)("p",null,"Using ",(0,o.kt)("a",{parentName:"p",href:"https://hub.docker.com/"},"dockerhub")," as an example, the user would have to set\nthe value of ",(0,o.kt)("inlineCode",{parentName:"p"},"$REGISTRY_URL")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"registry.hub.docker.com"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"$REGISTRY_USER")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"$REGISTRY_PASSWORD")," would be set to the dockerhub credentials, and ",(0,o.kt)("inlineCode",{parentName:"p"},"$REGISTRY_NAMESPACE"),"\nwould be either an organization or the username."),(0,o.kt)("p",null,"When the above arguments are set, Epinio doesn't deploy a registry on the cluster."),(0,o.kt)("h3",{id:"advanced-setup-for-a-secure-external-registry"},"Advanced setup for a secure external registry"),(0,o.kt)("p",null,"When access to the external registry is secured via TLS it becomes necessary to make\nthe relevant certificate known to both Epinio and the cluster (i.e. the kubelets)."),(0,o.kt)("p",null,"Assuming that ",(0,o.kt)("inlineCode",{parentName:"p"},"epinio-external-registry-tls")," is the name of the Kubernetes secret\nused to store the certificate then extending the ",(0,o.kt)("inlineCode",{parentName:"p"},"helm install")," command with"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    --set containerregistry.certificateSecret=epinio-external-registry-tls\n")),(0,o.kt)("p",null,"is enough to make the certificate known to epinio."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"The secret is expected to be in the ",(0,o.kt)("inlineCode",{parentName:"p"},"epinio")," namespace.\nThe certificate is expected to be under the key ",(0,o.kt)("inlineCode",{parentName:"p"},"tls.crt")," of that secret\nand is expected to be in PEM format.")),(0,o.kt)("p",null,"Making the same information known to the cluster itself, i.e. the kubelets, differs\nbetween the various distributions of Kubernetes."),(0,o.kt)("p",null,"Assuming a k3s cluster running on an openSUSE or SLE-based host, and further\nassuming that the certificate is stored in a file named ",(0,o.kt)("inlineCode",{parentName:"p"},"CA.pem")," in the current\nworking directory the commands would be"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo cp CA.pem /etc/pki/trust/anchors/\nsudo update-ca-certificates\nsudo systemctl restart k3s[-agent].service\n")))}m.isMDXComponent=!0}}]);