"use strict";(self.webpackChunkepinio_docusaurus=self.webpackChunkepinio_docusaurus||[]).push([[44790],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var i=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=i.createContext({}),l=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=l(e.components);return i.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(t),m=o,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return t?i.createElement(h,r(r({ref:n},p),{},{components:t})):i.createElement(h,r({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,r=new Array(a);r[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var l=2;l<a;l++)r[l]=t[l];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},20473:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var i=t(83117),o=t(80102),a=(t(67294),t(3905)),r=["components"],s={sidebar_label:"AWS IAM integration",sidebar_position:27,title:"AWS IAM integration",description:"How-to use Amazon Web Services (AWS) Identity and Access Management (IAM) with Epinio.",keywords:["epinio","kubernetes","aws","iam"],"doc-type":["how-to"],"doc-topic":["epinio","customize","operations","aws-iam"]},c=void 0,l={unversionedId:"howtos/operations/aws_iam_integration",id:"howtos/operations/aws_iam_integration",title:"AWS IAM integration",description:"How-to use Amazon Web Services (AWS) Identity and Access Management (IAM) with Epinio.",source:"@site/docs/howtos/operations/aws_iam_integration.md",sourceDirName:"howtos/operations",slug:"/howtos/operations/aws_iam_integration",permalink:"/next/howtos/operations/aws_iam_integration",draft:!1,editUrl:"https://github.com/epinio/docs/edit/main/docs/howtos/operations/aws_iam_integration.md",tags:[],version:"current",sidebarPosition:27,frontMatter:{sidebar_label:"AWS IAM integration",sidebar_position:27,title:"AWS IAM integration",description:"How-to use Amazon Web Services (AWS) Identity and Access Management (IAM) with Epinio.",keywords:["epinio","kubernetes","aws","iam"],"doc-type":["how-to"],"doc-topic":["epinio","customize","operations","aws-iam"]},sidebar:"docs",previous:{title:"Installing a metrics server",permalink:"/next/howtos/operations/install_metrics_server"},next:{title:"An External IP address for local Kubernetes",permalink:"/next/howtos/customization/provision_external_ip_for_local_kubernetes"}},p={},u=[{value:"Authentication using an IAM profile",id:"authentication-using-an-iam-profile",level:2},{value:"Example",id:"example",level:3},{value:"Authentication with an AWS EKS service account",id:"authentication-with-an-aws-eks-service-account",level:2},{value:"Epinio server role",id:"epinio-server-role",level:3},{value:"Epinio staging service account",id:"epinio-staging-service-account",level:3}],d={toc:u};function m(e){var n=e.components,t=(0,o.Z)(e,r);return(0,a.kt)("wrapper",(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"How-to use Amazon Web Services (AWS) Identity and Access Management (IAM) with Epinio."),(0,a.kt)("h2",{id:"authentication-using-an-iam-profile"},"Authentication using an IAM profile"),(0,a.kt)("p",null,"When using AWS S3 Epinio supports authentication by AWS IAM profile, instead of using regular credentials.\nEpinio uses this mode when the credential keys are empty.\nThat is, ",(0,a.kt)("inlineCode",{parentName:"p"},'s3.accessKeyID=""'),", and ",(0,a.kt)("inlineCode",{parentName:"p"},'s3.secretAccessKey=""'),".\nWhen using AWS, the Kubernetes cluster has to have an IAM policy attached.\nThis provides the permissions for access to S3."),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("p",null,"Create a policy with"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},'aws iam create-policy \\\n    --policy-name EpinioECEKSClusterPolicy \\\n    --policy-document \\\n\'{\n    "Version": "2012-10-17",\n    "Statement": [\n        {\n            "Effect": "Allow",\n            "Action": [\n                "s3:ListBucket",\n                "s3:PutObject",\n                "s3:GetObject",\n                "s3:GetBucketLocation",\n                "s3:ListAllMyBuckets",\n                "s3:CreateBucket",\n                "s3:DeleteObject",\n                "sts:AssumeRole"\n            ],\n            "Resource": [\n                "*"\n            ]\n        }\n    ]\n}\'\n')),(0,a.kt)("p",null,"Attach that policy to the instance role with"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},'aws iam attach-role-policy \\\n    --role-name "<your instance role here>" \\\n    --policy-arn "<your policy arn here>"\n')),(0,a.kt)("p",null,"You can find the instance role with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"kubectl -n kube-system describe configmap aws-auth \\\n  | grep rolearn | cut -d':' -f7 | cut -d'/' -f2\n")),(0,a.kt)("p",null,"To clean up once finished, remove Epinio, detach and delete policies with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},'helm delete --wait epinio -n epinio\nkubectl delete --wait ns epinio workspace\n\naws iam detach-role-policy \\\n  --role-name "<your instance role here>" \\\n  --policy-arn "<your policy arn here>"\n\n# If created ad-hoc policy\naws iam list-policies #  find and copy EpinioECEKSClusterPolicy ARN used in next step\naws iam delete-policy --policy-arn arn:aws:iam::${AWS_ACCOUNT_ID}:policy/EpinioECEKSClusterPolicy\n\n')),(0,a.kt)("h2",{id:"authentication-with-an-aws-eks-service-account"},"Authentication with an AWS EKS service account"),(0,a.kt)("p",null,"EKS is the Elastic Kubernetes Service."),(0,a.kt)("p",null,"For increased security you can attach the policy to the Epinio pod ServiceAccount.\nYou also need to create a specific ServiceAccount that you bind to the staging job with the ",(0,a.kt)("inlineCode",{parentName:"p"},"server.stagingServiceAccountName")," value."),(0,a.kt)("p",null,"To use AWS IAM roles for service accounts, an IAM OIDC provider must exist for your cluster's OIDC issuer URL."),(0,a.kt)("p",null,"Find whether you have an existing IAM OIDC provider for your cluster with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},'oidc_id=$(aws eks describe-cluster --name ${CLUSTER_NAME} \\\n  --query "cluster.identity.oidc.issuer" \\\n  --output text | cut -d \'/\' -f 5)\naws iam list-open-id-connect-providers \\\n  | grep $oidc_id | cut -d "/" -f4\n')),(0,a.kt)("p",null,"If the command returns any output, then you already have an IAM OIDC provider for your cluster so you can skip the next step.\nIf there is no output, then you must create an IAM OIDC provider for your cluster.\nCheck the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/eks/latest/userguide/enable-iam-roles-for-service-accounts.html"},"AWS guide")," for this task."),(0,a.kt)("h3",{id:"epinio-server-role"},"Epinio server role"),(0,a.kt)("p",null,"Make sure you have correctly deployed Epinio.\nLater, you assign a new AWS Service Account to an existing Epinio installation with the ",(0,a.kt)("inlineCode",{parentName:"p"},"helm upgrade")," command."),(0,a.kt)("p",null,"You need to create a IAM Role:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\nset -euo pipefail\n\nOIDC_PROVIDER=$(aws eks describe-cluster --name ${CLUSTER_NAME} --query "cluster.identity.oidc.issuer" --output text | sed -e "s/^https:\\/\\///")\n\nFILENAME=trust-relationship.json\n\ncat > ${FILENAME} <<EOF\n{\n  "Version": "2012-10-17",\n  "Statement": [\n    {\n      "Effect": "Allow",\n      "Principal": {\n        "Federated": "arn:aws:iam::$AWS_ACCOUNT_ID:oidc-provider/$OIDC_PROVIDER"\n      },\n      "Action": "sts:AssumeRoleWithWebIdentity",\n      "Condition": {\n        "StringEquals": {\n          "$OIDC_PROVIDER:aud": "sts.amazonaws.com",\n          "$OIDC_PROVIDER:sub": "system:serviceaccount:epinio:epinio-server"\n        }\n      }\n    }\n  ]\n}\nEOF\n\naws iam create-role \\\n  --role-name epinio-server-role \\\n  --assume-role-policy-document file://${FILENAME} \\\n  --description "Epinio server role"\n\nrm ${FILENAME}\n')),(0,a.kt)("p",null,"You attach it to the policy:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},'aws iam attach-role-policy \\\n    --role-name epinio-server-role \\\n    --policy-arn "arn:aws:iam::${AWS_ACCOUNT_ID}:policy/EpinioECEKSClusterPolicy"\n')),(0,a.kt)("p",null,"And annotate the Epinio Service Account to bind it to the role:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},'kubectl annotate serviceaccount epinio-server \\\n    --namespace epinio \\\n    "eks.amazonaws.com/role-arn=arn:aws:iam::${AWS_ACCOUNT_ID}:role/epinio-server-role"\n')),(0,a.kt)("h3",{id:"epinio-staging-service-account"},"Epinio staging service account"),(0,a.kt)("p",null,"The staging job needs a dedicated service account. You can create it with ",(0,a.kt)("inlineCode",{parentName:"p"},"eksctl"),".\nSince it's a new one, attach it directly to the existing policy:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},'eksctl create iamserviceaccount \\\n    --name epinio-staging-service-account \\\n    --namespace epinio \\\n    --cluster ${CLUSTER_NAME} \\\n    --role-name "epinio-staging-role" \\\n    --attach-policy-arn "arn:aws:iam::${AWS_ACCOUNT_ID}:policy/EpinioECEKSClusterPolicy" \\\n    --approve\n')),(0,a.kt)("p",null,"You can update your Helm deployment specifying this new service account by adding the flag",(0,a.kt)("br",null),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"--set server.stagingServiceAccountName=epinio-staging-service-account"),(0,a.kt)("br",null),"\nwhen upgrading Epinio:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"helm upgrade epinio epinio/epinio \\\n    --namespace epinio --create-namespace \\\n    --set global.domain=<MY_DOMAIN> \\\n    --set server.stagingServiceAccountName=epinio-staging-service-account \\\n    --wait\n")),(0,a.kt)("p",null,"Once finished, to remove everything, remove Epinio, delete the service account, detach and delete the policies:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},'helm delete --wait epinio -n epinio\nkubectl delete --wait ns epinio workspace\n\neksctl delete iamserviceaccount \\\n--cluster $CLUSTER_NAME \\\n--name epinio-staging-service-account \\\n--namespace epinio\n\naws iam detach-role-policy \\\n--role-name epinio-server-role \\\n--policy-arn "arn:aws:iam::${AWS_ACCOUNT_ID}:policy/EpinioECEKSClusterPolicy"\n\naws iam delete-role \\\n--role-name epinio-server-role\n\naws iam list-policies #  find and copy EpinioECEKSClusterPolicy ARN used in next step\naws iam delete-policy \\\n--policy-arn arn:aws:iam::${AWS_ACCOUNT_ID}:policy/EpinioECEKSClusterPolicy\n')))}m.isMDXComponent=!0}}]);