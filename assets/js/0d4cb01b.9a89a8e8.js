"use strict";(self.webpackChunkepinio_docusaurus=self.webpackChunkepinio_docusaurus||[]).push([[62348],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,u=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),f=s(n),m=i,g=f["".concat(u,".").concat(m)]||f[m]||l[m]||o;return n?r.createElement(g,a(a({ref:t},p),{},{components:n})):r.createElement(g,a({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=f;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=e,c.mdxType="string"==typeof e?e:i,a[1]=c;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},23568:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return l}});var r=n(83117),i=n(80102),o=(n(67294),n(3905)),a=["components"],c={sidebar_label:"Creating A Git Configuration",sidebar_position:13,title:""},u="Create a Git Configuration",s={unversionedId:"howtos/customization/create_git_configuration",id:"howtos/customization/create_git_configuration",title:"",description:"As described in the Git Configuration reference page, Epinio Git Configurations are Kubernetes secrets with a particular label.",source:"@site/docs/howtos/customization/create_git_configuration.md",sourceDirName:"howtos/customization",slug:"/howtos/customization/create_git_configuration",permalink:"/next/howtos/customization/create_git_configuration",draft:!1,editUrl:"https://github.com/epinio/docs/edit/main/docs/howtos/customization/create_git_configuration.md",tags:[],version:"current",sidebarPosition:13,frontMatter:{sidebar_label:"Creating A Git Configuration",sidebar_position:13,title:""},sidebar:"docs",previous:{title:"Creating A Custom Service",permalink:"/next/howtos/customization/create_custom_service"},next:{title:"Custom Builders",permalink:"/next/howtos/customization/custom_builder"}},p={},l=[],f={toc:l};function m(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"create-a-git-configuration"},"Create a Git Configuration"),(0,o.kt)("p",null,"As described ",(0,o.kt)("a",{parentName:"p",href:"/next/references/git_configuration"},"in the Git Configuration reference page"),", Epinio Git Configurations are Kubernetes secrets with a particular label."),(0,o.kt)("p",null,"To create one you apply a Secret resource to your Kubernetes cluster:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1 \nkind: Secret \ntype: Opaque \nmetadata: \n  labels: \n    epinio.io/api-git-credentials: "true"\n  name: github-epinio-example-go-configuration \n  namespace: epinio \nstringData:\n  url: https://github.com\n  provider: github\n  username: "myuser" \n  password: "abcde12345" \n  userOrg: epinio \n  repo: example-go \n  skipSSL: true \n  certificate: |\n    -----BEGIN CERTIFICATE-----\n    MIIBaTCCAQ+gAwIBAgIRAN4tvwEOKogvOzT/KccL8t8wCgYIKoZIzj0EAwIwFDES\n    ***************\n    -----END CERTIFICATE-----\n')),(0,o.kt)("p",null,"The only required field is the ",(0,o.kt)("inlineCode",{parentName:"p"},"url"),", so if you want for example to just skip the SSL verification for a particular provider you can create a simpler secret, and label it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'kubectl create secret generic mygit-config -n epinio --from-literal=url=https://gitlab.mydomain.com --from-literal=skipSSL=true\nkubectl label secret mygit-config -n epinio "epinio.io/api-git-credentials=true"\n')),(0,o.kt)("p",null,"or apply this resource:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1 \nkind: Secret \ntype: Opaque \nmetadata: \n  labels: \n    epinio.io/api-git-credentials: "true"\n  name: mygit-config \n  namespace: epinio \nstringData:\n  url: https://gitlab.mydomain.com\n  skipSSL: true \n')))}m.isMDXComponent=!0}}]);