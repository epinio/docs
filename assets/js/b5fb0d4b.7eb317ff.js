"use strict";(self.webpackChunkepinio_docusaurus=self.webpackChunkepinio_docusaurus||[]).push([[2698],{3905:function(e,n,i){i.d(n,{Zo:function(){return u},kt:function(){return d}});var o=i(67294);function t(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function r(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,o)}return i}function a(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?r(Object(i),!0).forEach((function(n){t(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function c(e,n){if(null==e)return{};var i,o,t=function(e,n){if(null==e)return{};var i,o,t={},r=Object.keys(e);for(o=0;o<r.length;o++)i=r[o],n.indexOf(i)>=0||(t[i]=e[i]);return t}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)i=r[o],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(t[i]=e[i])}return t}var s=o.createContext({}),p=function(e){var n=o.useContext(s),i=n;return e&&(i="function"==typeof e?e(n):a(a({},n),e)),i},u=function(e){var n=p(e.components);return o.createElement(s.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},f=o.forwardRef((function(e,n){var i=e.components,t=e.mdxType,r=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),f=p(i),d=t,m=f["".concat(s,".").concat(d)]||f[d]||l[d]||r;return i?o.createElement(m,a(a({ref:n},u),{},{components:i})):o.createElement(m,a({ref:n},u))}));function d(e,n){var i=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var r=i.length,a=new Array(r);a[0]=f;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:t,a[1]=c;for(var p=2;p<r;p++)a[p]=i[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,i)}f.displayName="MDXCreateElement"},65728:function(e,n,i){i.r(n),i.d(n,{assets:function(){return u},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return l}});var o=i(83117),t=i(80102),r=(i(67294),i(3905)),a=["components"],c={sidebar_label:"epinio configuration show",title:"",description:"epinio configuration show",keywords:["epinio","kubernetes","epinio configuration show"],"doc-type":["reference"],"doc-topic":["epinio","reference","epinio-cli","epinio-configuration-show"],"doc-persona":["epinio-developer","epinio-operator"]},s=void 0,p={unversionedId:"references/commands/cli/configuration/epinio_configuration_show",id:"version-1.11.0/references/commands/cli/configuration/epinio_configuration_show",title:"",description:"epinio configuration show",source:"@site/versioned_docs/version-1.11.0/references/commands/cli/configuration/epinio_configuration_show.md",sourceDirName:"references/commands/cli/configuration",slug:"/references/commands/cli/configuration/epinio_configuration_show",permalink:"/references/commands/cli/configuration/epinio_configuration_show",draft:!1,editUrl:"https://github.com/epinio/docs/edit/main/versioned_docs/version-1.11.0/references/commands/cli/configuration/epinio_configuration_show.md",tags:[],version:"1.11.0",frontMatter:{sidebar_label:"epinio configuration show",title:"",description:"epinio configuration show",keywords:["epinio","kubernetes","epinio configuration show"],"doc-type":["reference"],"doc-topic":["epinio","reference","epinio-cli","epinio-configuration-show"],"doc-persona":["epinio-developer","epinio-operator"]},sidebar:"docs",previous:{title:"epinio configuration list",permalink:"/references/commands/cli/configuration/epinio_configuration_list"},next:{title:"epinio configuration unbind",permalink:"/references/commands/cli/configuration/epinio_configuration_unbind"}},u={},l=[{value:"epinio configuration show",id:"epinio-configuration-show",level:2},{value:"Synopsis",id:"synopsis",level:3},{value:"Options",id:"options",level:3},{value:"Options inherited from parent commands",id:"options-inherited-from-parent-commands",level:3},{value:"SEE ALSO",id:"see-also",level:3}],f={toc:l};function d(e){var n=e.components,i=(0,t.Z)(e,a);return(0,r.kt)("wrapper",(0,o.Z)({},f,i,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"epinio-configuration-show"},"epinio configuration show"),(0,r.kt)("p",null,"Configuration information"),(0,r.kt)("h3",{id:"synopsis"},"Synopsis"),(0,r.kt)("p",null,"Show detailed information of the named configuration."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"epinio configuration show NAME [flags]\n")),(0,r.kt)("h3",{id:"options"},"Options"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'  -h, --help            help for show\n  -o, --output string   sets output format [text|json] (default "text")\n')),(0,r.kt)("h3",{id:"options-inherited-from-parent-commands"},"Options inherited from parent commands"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'  -H, --header stringArray       Add custom header to every request executed\n  -c, --kubeconfig string        (KUBECONFIG) path to a kubeconfig, not required in-cluster\n      --no-colors                Suppress colorized output\n      --settings-file string     (EPINIO_SETTINGS) set path of settings file (default "~/.config/epinio/settings.yaml")\n      --skip-ssl-verification    (SKIP_SSL_VERIFICATION) Skip the verification of TLS certificates\n      --timeout-multiplier int   (EPINIO_TIMEOUT_MULTIPLIER) Multiply timeouts by this factor (default 1)\n      --trace-file string        (TRACE_FILE) Print trace messages to the specified file\n      --trace-level int          (TRACE_LEVEL) Only print trace messages at or above this level (0 to 255, default 0, print nothing)\n      --trace-output string      (TRACE_OUTPUT) Sets trace output format [text,json] (default "text")\n      --verbosity int            (VERBOSITY) Only print progress messages at or above this level (0 or 1, default 0)\n')),(0,r.kt)("h3",{id:"see-also"},"SEE ALSO"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/references/commands/cli/configuration/epinio_configuration"},"epinio configuration"),"\t - Epinio configuration features")))}d.isMDXComponent=!0}}]);