"use strict";(self.webpackChunkepinio_docusaurus=self.webpackChunkepinio_docusaurus||[]).push([[15870],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return h}});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},u=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(a),h=i,m=d["".concat(p,".").concat(h)]||d[h]||c[h]||o;return a?n.createElement(m,r(r({ref:t},u),{},{components:a})):n.createElement(m,r({ref:t},u))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=a.length,r=new Array(o);r[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var s=2;s<o;s++)r[s]=a[s];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},39941:function(e,t,a){a.r(t),a.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return c}});var n=a(83117),i=a(80102),o=(a(67294),a(3905)),r=["components"],l={sidebar_label:"Quickstart",sidebar_position:1,title:""},p="Quickstart",s={unversionedId:"tutorials/quickstart",id:"version-1.9.0/tutorials/quickstart",title:"",description:"This guide will help you deploy and use Epinio with default options suitable for evaluation or testing purposes on an existing Kubernetes cluster. For advanced Epinio deployment scenarios look into Installation Section.",source:"@site/versioned_docs/version-1.9.0/tutorials/quickstart.md",sourceDirName:"tutorials",slug:"/tutorials/quickstart",permalink:"/1.9.0/tutorials/quickstart",draft:!1,editUrl:"https://github.com/epinio/docs/edit/main/versioned_docs/version-1.9.0/tutorials/quickstart.md",tags:[],version:"1.9.0",sidebarPosition:1,frontMatter:{sidebar_label:"Quickstart",sidebar_position:1,title:""},sidebar:"docs",previous:{title:"Introduction",permalink:"/1.9.0/"},next:{title:"Namespaces",permalink:"/1.9.0/tutorials/namespace-tutorial"}},u={},c=[{value:"Installation",id:"installation",level:2},{value:"Deploy Epinio",id:"deploy-epinio",level:3},{value:"Install cert-manager",id:"install-cert-manager",level:4},{value:"Install Epinio",id:"install-epinio",level:4},{value:"Download the Epinio CLI binary",id:"download-the-epinio-cli-binary",level:4},{value:"Deploy an application with Epinio",id:"deploy-an-application-with-epinio",level:2},{value:"Login",id:"login",level:3},{value:"Push an application",id:"push-an-application",level:3},{value:"Sample applications",id:"sample-applications",level:4},{value:"Push an app",id:"push-an-app",level:4},{value:"Note that the <code>--path</code> parameter is optional. If not specified the current working directory will be used. Always ensure that the chosen directory contains a supported application.",id:"note-that-the---path-parameter-is-optional-if-not-specified-the-current-working-directory-will-be-used-always-ensure-that-the-chosen-directory-contains-a-supported-application",level:6},{value:"Note: If you want to know the details of the <code>epinio push</code> process, please read the detailed push docs",id:"note-if-you-want-to-know-the-details-of-the-epinio-push-process-please-read-the-detailed-push-docs",level:6},{value:"Check that your application is working",id:"check-that-your-application-is-working",level:4},{value:"List all commands",id:"list-all-commands",level:3},{value:"Delete an application",id:"delete-an-application",level:3},{value:"Create a separate namespace",id:"create-a-separate-namespace",level:3}],d={toc:c};function h(e){var t=e.components,a=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"quickstart"},"Quickstart"),(0,o.kt)("p",null,"This guide will help you deploy and use Epinio with default options suitable for evaluation or testing purposes on an existing Kubernetes cluster. For advanced Epinio deployment scenarios look into ",(0,o.kt)("a",{parentName:"p",href:"/1.9.0/installation/install_epinio"},"Installation Section"),"."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,"Make sure your Kubernetes environment fulfills the ",(0,o.kt)("a",{parentName:"p",href:"/1.9.0/references/system_requirements/global"},"Epinio Requirements"),". A ",(0,o.kt)("strong",{parentName:"p"},"default StorageClass"),"  as well as a ",(0,o.kt)("strong",{parentName:"p"},"default IngressClass")," are required. If you do not have a suitable Kubernetes cluster yet, you can follow the ",(0,o.kt)("a",{parentName:"p",href:"/1.9.0/howtos/install_epinio_on_rke"},"RKE2 Installation")," section."),(0,o.kt)("h3",{id:"deploy-epinio"},"Deploy Epinio"),(0,o.kt)("p",null,"Run the  ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl get nodes -o wide")," command to get the ",(0,o.kt)("inlineCode",{parentName:"p"},"INTERNAL-IP")," value of the first Kubernetes node. Later you will use this value along with a wildcard DNS service domain (for eg. ",(0,o.kt)("inlineCode",{parentName:"p"},"sslip.io"),") as helm ",(0,o.kt)("inlineCode",{parentName:"p"},"global.domain")," value for installing Epinio."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"If you use Local Kubernetes Cluster, the value should be ",(0,o.kt)("inlineCode",{parentName:"p"},"127.0.0.1")," regardless of the output from the command above. Please refer to your Local Kubernetes Cluster documentation for the IP address details of the Ingress endpoint.")),(0,o.kt)("h4",{id:"install-cert-manager"},"Install cert-manager"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add jetstack https://charts.jetstack.io\nhelm repo update\nhelm upgrade --install cert-manager jetstack/cert-manager \\\n    --namespace cert-manager --create-namespace \\\n    --set installCRDs=true\n")),(0,o.kt)("h4",{id:"install-epinio"},"Install Epinio"),(0,o.kt)("p",null,"Then Epinio can be deployed by using ",(0,o.kt)("inlineCode",{parentName:"p"},"helm")," as shown below. Replace the ",(0,o.kt)("inlineCode",{parentName:"p"},"<INTERNAL-IP>")," placeholder with the correct IP address:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add epinio https://epinio.github.io/helm-charts\nhelm repo update\nhelm upgrade --install epinio epinio/epinio \\\n    --namespace epinio --create-namespace \\\n    --set global.domain=<INTERNAL-IP>.sslip.io\n")),(0,o.kt)("p",null,"You can then point your browser and/or epinio CLI to the ",(0,o.kt)("inlineCode",{parentName:"p"},"https://epinio.<INTERNAL-IP>.sslip.io")," url."),(0,o.kt)("h4",{id:"download-the-epinio-cli-binary"},"Download the Epinio CLI binary"),(0,o.kt)("p",null,"Install the latest Epinio CLI with ",(0,o.kt)("inlineCode",{parentName:"p"},"brew"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"brew install epinio\n")),(0,o.kt)("p",null,"or download the desired version and architecture from the Assets section of ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/epinio/epinio/releases/"},"https://github.com/epinio/epinio/releases/"),"."),(0,o.kt)("h2",{id:"deploy-an-application-with-epinio"},"Deploy an application with Epinio"),(0,o.kt)("h3",{id:"login"},"Login"),(0,o.kt)("p",null,"The first task to perform after Epinio installation, is to ",(0,o.kt)("a",{parentName:"p",href:"/1.9.0/references/commands/cli/epinio_login"},"login")," with the ",(0,o.kt)("inlineCode",{parentName:"p"},"epinio")," binary:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"epinio login -u admin 'https://epinio.127.0.0.1.sslip.io'\n\n# Trust the certificate by pressing 'y' and 'enter'\n")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"If you encounter an x509 error due to mismatched certificates after a restart, you can resolve it by reloading the certificates with ",(0,o.kt)("inlineCode",{parentName:"p"},"epinio settings update-ca")," without having to log in again.")),(0,o.kt)("p",null,"You can confirm that you're logged in by checking the Epinio settings:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"epinio settings show\n")),(0,o.kt)("h3",{id:"push-an-application"},"Push an application"),(0,o.kt)("h4",{id:"sample-applications"},"Sample applications"),(0,o.kt)("p",null,"If you just want an application that works use the one inside the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/epinio/epinio/tree/main/assets/sample-app"},"sample-app directory"),"."),(0,o.kt)("p",null,"You can copy it to your system with\nthe following commands:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/epinio/epinio.git\ncd epinio/assets/\n")),(0,o.kt)("h4",{id:"push-an-app"},"Push an app"),(0,o.kt)("p",null,"There are two ways to push an application:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"You can provide an ",(0,o.kt)("a",{parentName:"li",href:"/1.9.0/references/manifests"},"Application Manifest")," which contains the required configuration for the applications.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"epinio push manifest.yaml\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"You can provide the configuration as parameters in which case the parameter ",(0,o.kt)("inlineCode",{parentName:"li"},"--name")," is mandatory.\nBecause of the default route the name has to be unique across all namespaces.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"epinio push --name sample --path sample-app\n")),(0,o.kt)("hr",null),(0,o.kt)("h6",{id:"note-that-the---path-parameter-is-optional-if-not-specified-the-current-working-directory-will-be-used-always-ensure-that-the-chosen-directory-contains-a-supported-application"},"Note that the ",(0,o.kt)("inlineCode",{parentName:"h6"},"--path")," parameter is optional. If not specified the current working directory will be used. Always ensure that the chosen directory contains a supported application."),(0,o.kt)("hr",null),(0,o.kt)("p",null,"If you want to know what applications are supported in Epinio, please read the\n",(0,o.kt)("a",{parentName:"p",href:"/1.9.0/references/supported_applications"},"notes about supported applications"),"."),(0,o.kt)("p",null,"We also provide information about the more advanced ",(0,o.kt)("a",{parentName:"p",href:"/1.9.0/explanations/advanced#git-pushing"},"git model"),"."),(0,o.kt)("hr",null),(0,o.kt)("h6",{id:"note-if-you-want-to-know-the-details-of-the-epinio-push-process-please-read-the-detailed-push-docs"},"Note: If you want to know the details of the ",(0,o.kt)("inlineCode",{parentName:"h6"},"epinio push")," process, please read the ",(0,o.kt)("a",{parentName:"h6",href:"/1.9.0/explanations/detailed-push-process"},"detailed push docs")),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"check-that-your-application-is-working"},"Check that your application is working"),(0,o.kt)("p",null,"After the application has been pushed, a unique URL is printed which you can use to access your application. If you don't have this URL available anymore you can find it again by running:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"epinio app show sample\n")),(0,o.kt)("p",null,'("Routes" is the part your are looking for)'),(0,o.kt)("p",null,"Go ahead and open the application route in your browser!"),(0,o.kt)("h3",{id:"list-all-commands"},"List all commands"),(0,o.kt)("p",null,"To see all the applications you have deployed use the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"epinio apps list\n")),(0,o.kt)("h3",{id:"delete-an-application"},"Delete an application"),(0,o.kt)("p",null,"To delete the application you just deployed run the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"epinio delete sample\n")),(0,o.kt)("h3",{id:"create-a-separate-namespace"},"Create a separate namespace"),(0,o.kt)("p",null,"If you want to keep your various application separated, you can use the concept of namespaces. Create a new namespace with this command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"epinio namespace create newspace\n")),(0,o.kt)("p",null,'To start deploying application to this new namespace you have to "target" it:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"epinio target newspace\n")),(0,o.kt)("p",null,"After this and until you target another namespace, whenever you run ",(0,o.kt)("inlineCode",{parentName:"p"},"epinio push")," you will be deploying to this new namespace."))}h.isMDXComponent=!0}}]);