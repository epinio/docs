"use strict";(self.webpackChunkepinio_docusaurus=self.webpackChunkepinio_docusaurus||[]).push([[28003],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var i=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=i.createContext({}),l=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return i.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=l(n),d=o,m=h["".concat(p,".").concat(d)]||h[d]||u[d]||r;return n?i.createElement(m,a(a({ref:t},c),{},{components:n})):i.createElement(m,a({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,a=new Array(r);a[0]=h;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var l=2;l<r;l++)a[l]=n[l];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},77241:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var i=n(83117),o=n(80102),r=(n(67294),n(3905)),a=["components"],s={sidebar_label:"Advanced topics",title:"Advanced topics",description:"Advanced topics in Epinio application development environments",keywords:["epinio","kubernetes","advanced topics"]},p=void 0,l={unversionedId:"explanations/advanced",id:"explanations/advanced",title:"Advanced topics",description:"Advanced topics in Epinio application development environments",source:"@site/docs/explanations/advanced.md",sourceDirName:"explanations",slug:"/explanations/advanced",permalink:"/next/explanations/advanced",draft:!1,editUrl:"https://github.com/epinio/docs/edit/main/docs/explanations/advanced.md",tags:[],version:"current",frontMatter:{sidebar_label:"Advanced topics",title:"Advanced topics",description:"Advanced topics in Epinio application development environments",keywords:["epinio","kubernetes","advanced topics"]},sidebar:"docs",previous:{title:"Epinio Journey: Deploy complex applications with a custom builder image",permalink:"/next/tutorials/custom_builder_go"},next:{title:"Epinio push process",permalink:"/next/explanations/detailed-push-process"}},c={},u=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Ingress controller",id:"ingress-controller",level:3},{value:"Cert-manager",id:"cert-manager",level:3},{value:"Epinio installed components",id:"epinio-installed-components",level:2},{value:"Epinio API server",id:"epinio-api-server",level:3},{value:"Kubed",id:"kubed",level:3},{value:"Minio",id:"minio",level:3},{value:"s3gw",id:"s3gw",level:3},{value:"Container registry",id:"container-registry",level:3},{value:"Other advanced topics",id:"other-advanced-topics",level:2},{value:"Git pushing",id:"git-pushing",level:3}],h={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,a);return(0,r.kt)("wrapper",(0,i.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"There are some components, such as an Ingress controller and a Certificate Manager,\nrequired in a Kubernetes cluster before an Epinio installation.\nThe Epinio helm chart doesn't deploy these components."),(0,r.kt)("h3",{id:"ingress-controller"},"Ingress controller"),(0,r.kt)("p",null,"On a Kubernetes cluster, certain services need to be reachable from outside the cluster.\nFor Epinio, the ",(0,r.kt)("inlineCode",{parentName:"p"},"API server")," is one of them.\nSome applications deployed with Epinio might also need to be reachable from outside."),(0,r.kt)("p",null,"One way to expose services externally is by creating\n",(0,r.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/services-networking/ingress/"},"Ingress resources"),".\nIngress resources on their own, have no effect.\nThey're merely descriptions of the needed routing.\nAn Ingress controller handles the implementation of this routing."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Most clusters have an Ingress controller deployed by default.\nInstall ",(0,r.kt)("a",{parentName:"p",href:"https://doc.traefik.io/traefik/providers/kubernetes-ingress/"},"Traefik"),",\nor another, if an Ingress controller is absent.\nThe project uses Traefik in Epinio CI to test Epinio."),(0,r.kt)("p",{parentName:"admonition"},"There is installation documentation for\n",(0,r.kt)("a",{parentName:"p",href:"/next/installation/install_epinio#ingress-controller"},"Traefik"))),(0,r.kt)("p",null,"Epinio creates an Ingress resource for the Epinio API server and each application deployed."),(0,r.kt)("h3",{id:"cert-manager"},"Cert-manager"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://cert-manager.io/docs/"},"Cert-manager documentation")),(0,r.kt)("p",null,"Cert-manager is a Kubernetes controller that generates and renews certificates.\nYou need these certificates to securely serve the endpoints over TLS\n(for example, the Epinio API server)."),(0,r.kt)("p",null,"Epinio supports options when it comes to certificate issuers\n(Let's Encrypt, your own private CA, self signed certs).\nCert-manager simplifies the handling of certificate issuers within Epinio."),(0,r.kt)("p",null,"You can read more about certificate issuers in the\n",(0,r.kt)("a",{parentName:"p",href:"/next/howtos/other/certificate_issuers"},"certificate issuers documentation")),(0,r.kt)("h2",{id:"epinio-installed-components"},"Epinio installed components"),(0,r.kt)("p",null,"The official, supported, way to install Epinio is with the\n",(0,r.kt)("a",{parentName:"p",href:"https://artifacthub.io/packages/helm/epinio/epinio"},"Epinio Helm chart"),".\nThis Helm chart installs Epinio and it's component dependencies,\nlisted below, needed for Epinio to work."),(0,r.kt)("h3",{id:"epinio-api-server"},"Epinio API server"),(0,r.kt)("p",null,"The main component of Epinio is the API server.\nThe same ",(0,r.kt)("inlineCode",{parentName:"p"},"epinio")," binary is both the server and the CLI.\nThe server starts with the ",(0,r.kt)("inlineCode",{parentName:"p"},"epinio server")," command within a Kubernetes Pod, configured for Epinio."),(0,r.kt)("p",null,'Epinio CLI and web UI functionality are implemented using\nthe endpoints provided by the Epinio API server component.\nFor example, when the user asks Epinio to "push" an application,\nthe CLI contacts the "Upload", "Stage" and "Deploy" endpoints of the Epinio API to:'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"upload the application code"),(0,r.kt)("li",{parentName:"ul"},"create a container image for the application using this code"),(0,r.kt)("li",{parentName:"ul"},"run the application on the cluster.")),(0,r.kt)("p",null,"The Epinio API server runs on the cluster.\nIt's reached using Kubernetes resources like\nDeployments, Services,  Ingresses and Secrets."),(0,r.kt)("h3",{id:"kubed"},"Kubed"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubeops/kubed"},"Kubed documentation")),(0,r.kt)("p",null,"Epinio installs Kubed to keep secrets, needed in more than one namespace, synchronized.\nFor example, the image pull secret is needed in every application namespace\nso that Kubernetes can pull the built application images from the ",(0,r.kt)("a",{parentName:"p",href:"#container-registry"},"Container Registry"),"."),(0,r.kt)("p",null,"Kubed makes sure that if the source secret changes, the copies change too."),(0,r.kt)("h3",{id:"minio"},"Minio"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/minio/minio"},"Minio project link")),(0,r.kt)("p",null,"Minio is a storage solution implementing the same API as ",(0,r.kt)("a",{parentName:"p",href:"https://aws.amazon.com/s3/"},"Amazon S3"),"."),(0,r.kt)("p",null,"When the user pushes an application using a source code directory\n(with the ",(0,r.kt)("a",{parentName:"p",href:"/next/references/commands/cli/epinio_push"},(0,r.kt)("inlineCode",{parentName:"a"},"epinio push"))," command),\nthe CLI packages the source code into a tarball.\nIt then uploads it to the Epinio API server.\nThe API server copies that to the configured S3 storage for\nuse during the staging of the application."),(0,r.kt)("p",null,"When installing Epinio, you choose to use external S3 compatible storage,\nor let Epinio install one of Minio or s3gw on the cluster.\nYou can see a ",(0,r.kt)("a",{parentName:"p",href:"/next/howtos/customization/setup_external_s3"},"How-to here"),"."),(0,r.kt)("h3",{id:"s3gw"},"s3gw"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/aquarist-labs/s3gw"},"The s3gw project link")),(0,r.kt)("p",null,"S3gw is a lightweight S3-compatible solution.\nYou can specify it in the Epinio Helm chart as an alternative to Minio or an external S3 provider."),(0,r.kt)("h3",{id:"container-registry"},"Container registry"),(0,r.kt)("p",null,"The result of Epinio's application staging is a container image.\nYou use this image to create a Kubernetes deployment to run the application code.\nThe staging job writes the image to a container registry.\nThere is further information in the\n",(0,r.kt)("a",{parentName:"p",href:"/next/explanations/detailed-push-process"},"detailed push process")," documentation."),(0,r.kt)("p",null,"By default, the Epinio installation deploys a container registry inside the Kubernetes cluster, making the process fast and convenient."),(0,r.kt)("p",null,"Epinio comes with two consumers of this registry:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Staging job - pushing the images"),(0,r.kt)("li",{parentName:"ul"},"Kubernetes - pulling the images when creating a deployment for the application")),(0,r.kt)("p",null,"All consumers should communicate with the registry using TLS to encrypt communication.\nEpinio controls the staging job and it ensures that it trusts the CA used to sign the registry certificate.\nAchieving the same for Kubernetes requires configuration that's impossible from within the cluster,\ntherefore Epinio has no way to ensure that it trusts the CA.\nEpinio runs in a pod of the cluster and can't have permission to change cluster settings.\nChanges are only possible, from outside, by a cluster administrator."),(0,r.kt)("p",null,"There are 3 options:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Let the Epinio user manually configure Kubernetes to trust the CA"),(0,r.kt)("li",{parentName:"ol"},"Use a well-known trusted CA, so there's no configuration needed"),(0,r.kt)("li",{parentName:"ol"},"Don't encrypt the communication at all")),(0,r.kt)("p",null,"Currently Epinio doesn't support the first 2 options.\nIf ",(0,r.kt)("inlineCode",{parentName:"p"},"containerregistry.enabled")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," during installation (default),\nEpinio makes Kubernetes pull the images un-encrypted (the last option above).\nIf you need encryption, install the container registry manually\nand configure as an ",(0,r.kt)("a",{parentName:"p",href:"/next/howtos/customization/setup_external_registry"},'"external" registry'),"\nduring Epinio installation."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Communication between the staging job and container registry is TLS encrypted even when using the built-in container registry.")),(0,r.kt)("h2",{id:"other-advanced-topics"},"Other advanced topics"),(0,r.kt)("h3",{id:"git-pushing"},"Git pushing"),(0,r.kt)("p",null,"The quick way of pushing an application, explained in\n",(0,r.kt)("a",{parentName:"p",href:"/next/tutorials/quickstart#push-an-application"},"Quickstart: push an application"),",\nuses a local directory containing a checkout of the application's sources."),(0,r.kt)("p",null,"Internally this is a ",(0,r.kt)("a",{parentName:"p",href:"/next/explanations/detailed-push-process"},"complex")," procedure.\nThe client creates and uploads an archive (tarball or zip)\nfrom the sources to the Epinio server,\ncopying into Epinio's internal (or external) S3 storage.\nIt's then copied from that storage to a ",(0,r.kt)("inlineCode",{parentName:"p"},"PersistentVolumeClaim"),"\nto use in the job for staging.\nStaging is the compilation and creation of the docker image\nfor use by the underlying Kubernetes cluster."),(0,r.kt)("p",null,'The process is different when using the Epinio client\'s "git mode".\nIn this mode ',(0,r.kt)("a",{parentName:"p",href:"/next/references/commands/cli/epinio_push"},(0,r.kt)("inlineCode",{parentName:"a"},"epinio push")),"\ndoesn't take a local directory of sources,\nbut the location of a git repository and the id of the revision to use.\nThe client then asks the Epinio server to pull those sources and store them to the S3 storage.\nThe rest of the process is the same."),(0,r.kt)("p",null,"The syntax is"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"epinio push --name NAME --git GIT-REPOSITORY-URL,REVISION\n")),(0,r.kt)("p",null,"For comparison all the relevant syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"epinio push\nepinio push MANIFEST-PATH\nepinio push --name NAME\nepinio push --name NAME --path DIRECTORY\nepinio push --name NAME --git GIT-REPOSITORY-URL,REVISION\n")))}d.isMDXComponent=!0}}]);