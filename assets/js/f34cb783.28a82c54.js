"use strict";(self.webpackChunkepinio_docusaurus=self.webpackChunkepinio_docusaurus||[]).push([[67707],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return c}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=s(n),c=r,k=u["".concat(p,".").concat(c)]||u[c]||m[c]||i;return n?a.createElement(k,l(l({ref:t},d),{},{components:n})):a.createElement(k,l({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},77181:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return c},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return m}});var a=n(83117),r=n(80102),i=(n(67294),n(3905)),l=["components"],o={sidebar_label:"Authorization",title:""},p="Authorization",s={unversionedId:"references/authorization",id:"version-1.11.0/references/authorization",title:"",description:"Since version 1.11.0 Epinio is shipped with a new authorization layer with two default roles: admin and user.",source:"@site/versioned_docs/version-1.11.0/references/authorization.md",sourceDirName:"references",slug:"/references/authorization",permalink:"/references/authorization",draft:!1,editUrl:"https://github.com/epinio/docs/edit/main/versioned_docs/version-1.11.0/references/authorization.md",tags:[],version:"1.11.0",frontMatter:{sidebar_label:"Authorization",title:""},sidebar:"docs",previous:{title:"OIDC authentication",permalink:"/references/authentication_oidc"},next:{title:"Cert Manager",permalink:"/references/cert-manager"}},d={},m=[{value:"Switch user",id:"switch-user",level:2},{value:"List the Epinio users",id:"list-the-epinio-users",level:2},{value:"Add a new user",id:"add-a-new-user",level:2},{value:"Roles",id:"roles",level:2},{value:"Fields",id:"fields",level:3},{value:"Actions",id:"actions",level:2},{value:"Namespace",id:"namespace",level:3},{value:"App",id:"app",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Service",id:"service",level:3},{value:"Gitconfig",id:"gitconfig",level:3},{value:"Export Registries",id:"export-registries",level:3},{value:"Assign namespaces",id:"assign-namespaces",level:2}],u={toc:m};function c(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"authorization"},"Authorization"),(0,i.kt)("p",null,"Since version ",(0,i.kt)("strong",{parentName:"p"},"1.11.0")," Epinio is shipped with a new authorization layer with two default roles: ",(0,i.kt)("strong",{parentName:"p"},"admin")," and ",(0,i.kt)("strong",{parentName:"p"},"user"),'.\nRoles can be "namescoped", and they can be also customized with different permissions.'),(0,i.kt)("p",null,"A user with the admin role will have the permission to perform any operation. A standard user will have only read permissions, but also has the permissions to create namespaces. When a user creates a namespace, they will automatically have the admin permission for it."),(0,i.kt)("p",null,"By default, after the installation two users are available: ",(0,i.kt)("inlineCode",{parentName:"p"},"admin")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"epinio"),", both with the password ",(0,i.kt)("inlineCode",{parentName:"p"},"password"),". The operator can control the creation of those users through the ",(0,i.kt)("inlineCode",{parentName:"p"},"api.users")," key in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/epinio/helm-charts/blob/main/chart/epinio/values.yaml"},"values.yaml"),".\nIn a production setup, the default ",(0,i.kt)("inlineCode",{parentName:"p"},"api.users")," value needs to be overridden."),(0,i.kt)("h2",{id:"switch-user"},"Switch user"),(0,i.kt)("p",null,"To switch users you need to set the ",(0,i.kt)("inlineCode",{parentName:"p"},"user")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"pass")," keys of the Epinio settings file, located at ",(0,i.kt)("inlineCode",{parentName:"p"},"~/.config/epinio/settings.yaml"),".\nThe password has to be base64 encoded. Below, ",(0,i.kt)("inlineCode",{parentName:"p"},"cGFzc3dvcmQ=")," is the base64 encoded version of ",(0,i.kt)("inlineCode",{parentName:"p"},"password"),"."),(0,i.kt)("p",null,"You can also login again with the ",(0,i.kt)("inlineCode",{parentName:"p"},"epinio login [URL]")," command."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'api: https://epinio.mydomain.com\nappchart: ""\ncerts: |\n  -----BEGIN CERTIFICATE-----\n  MIICUTCCAfigAwIBAgIQXJq3y/ouo90Db7BWy34gbDAKBggqhkjOPQQDAjAUMRIw\n  ****************************************************************\n  ****************************************************************\n  ****************************************************************\n  qCPZOyTsHKnjmj7zxg57+Kq2KLFT\n  -----END CERTIFICATE-----\ncolors: true\nnamespace: workspace\npass: cGFzc3dvcmQ=\nuser: epinio\nwss: wss://epinio.mydomain.com\n')),(0,i.kt)("h2",{id:"list-the-epinio-users"},"List the Epinio users"),(0,i.kt)("p",null,"An Epinio user is a BasicAuth Kubernetes Secret, with the ",(0,i.kt)("inlineCode",{parentName:"p"},"epinio.io/api-user-credentials")," reserved label."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"epinio.io/roles")," annotation is used to declare the list of the assigned roles. It's a comma separated string with the id of the roles.\nIf a role is namespace-scoped the namespace where it applies appears after the ",(0,i.kt)("inlineCode",{parentName:"p"},":")," delimiter (i.e.: ",(0,i.kt)("inlineCode",{parentName:"p"},"admin:workspace"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Secret\ntype: BasicAuth\nmetadata:\n  labels:\n    epinio.io/api-user-credentials: "true"\n  annotations:\n    epinio.io/roles: "user,admin:workspace"\n  name: my-epinio-user\n  namespace: epinio\nstringData:\n  username: myuser\n  # password is hashed with the Bcrypt algorithm\n  password: "$2a$10$6bCi5NMstMK781In7JGiL.B44pgoplUb330FQvm6mVXMppbXBPiXS" # value is \'password\'\n')),(0,i.kt)("p",null,"To list the available users you can get the secrets from your cluster with ",(0,i.kt)("inlineCode",{parentName:"p"},"kubectl"),", filtering them with the proper labels:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# list all the users\nkubectl get secrets -n epinio -l 'epinio.io/api-user-credentials'\nNAME                  TYPE        DATA   AGE\ndefault-epinio-user   BasicAuth   3      5m10s\nadmin-epinio-user     BasicAuth   2      5m10s\n")),(0,i.kt)("h2",{id:"add-a-new-user"},"Add a new user"),(0,i.kt)("p",null,"Since a user is simply a Kubernetes Secret you can create a new user with a ",(0,i.kt)("inlineCode",{parentName:"p"},"kubectl apply"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'cat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Secret\ntype: BasicAuth\nmetadata:\n  labels:\n    epinio.io/api-user-credentials: "true"\n    epinio.io/roles: "admin"\n  name: my-epinio-user\n  namespace: epinio\nstringData:\n  username: myuser\n  password: "\\$2a\\$10\\$6bCi5NMstMK781In7JGiL.B44pgoplUb330FQvm6mVXMppbXBPiXS"\nEOF\n')),(0,i.kt)("h2",{id:"roles"},"Roles"),(0,i.kt)("p",null,"An Epinio role is a Kubernetes ConfigMap, with the ",(0,i.kt)("inlineCode",{parentName:"p"},"epinio.io/role")," reserved label."),(0,i.kt)("p",null,"The following yaml shows you the default ",(0,i.kt)("inlineCode",{parentName:"p"},"user")," role:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  labels:\n    epinio.io/role: "true"\n  name: "epinio-user-role"\n  namespace: {{ $.Release.Namespace }}\ndata:\n  id: user\n  name: "Epinio User Role"\n  default: "true"\n  actions: |\n    namespace\n    app_read\n    configuration_read\n    service_read\n    gitconfig_read\n')),(0,i.kt)("h3",{id:"fields"},"Fields"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Key"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"id"),(0,i.kt)("td",{parentName:"tr",align:null},"The ID of the Role")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"name"),(0,i.kt)("td",{parentName:"tr",align:null},"A friendly name for the Role")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"default"),(0,i.kt)("td",{parentName:"tr",align:null},"(optional) if set to ",(0,i.kt)("em",{parentName:"td"},"true")," the role will be the one selected as default if no other roles were assigned to the user")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"actions"),(0,i.kt)("td",{parentName:"tr",align:null},"The actions the roles can perform")))),(0,i.kt)("h2",{id:"actions"},"Actions"),(0,i.kt)("p",null,"Each Role can perform some actions defined in the ",(0,i.kt)("strong",{parentName:"p"},"actions")," field (newline separated). These actions are hardcoded in Epinio, and some of them depend on other actions. Enabling an action with a dependency will automatically enable the dependency as well."),(0,i.kt)("h3",{id:"namespace"},"Namespace"),(0,i.kt)("p",null,"These actions enable operations on Namespace commands and resources."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Action ID"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"namespace_read")),(0,i.kt)("td",{parentName:"tr",align:null},"Read permissions (list, show)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"namespace_write")),(0,i.kt)("td",{parentName:"tr",align:null},"Write permissions (create, delete)",(0,i.kt)("br",null),"Depends on: ",(0,i.kt)("inlineCode",{parentName:"td"},"namespace_read"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"namespace")),(0,i.kt)("td",{parentName:"tr",align:null},"All the above",(0,i.kt)("br",null),"Depends on: ",(0,i.kt)("inlineCode",{parentName:"td"},"namespace_read"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"namespace_write"))))),(0,i.kt)("h3",{id:"app"},"App"),(0,i.kt)("p",null,"These actions enable operations on App commands and resources. They also enable commands related to  AppCharts (",(0,i.kt)("inlineCode",{parentName:"p"},"epinio app chart"),") and application environment variables."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Action ID"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"app_read")),(0,i.kt)("td",{parentName:"tr",align:null},"Read permissions (app list and show, env list and show)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"app_logs")),(0,i.kt)("td",{parentName:"tr",align:null},"Read application logs")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"app_write")),(0,i.kt)("td",{parentName:"tr",align:null},"Write permissions (app create, delete, push, export, stage, env set and unset)",(0,i.kt)("br",null),"Depends on: ",(0,i.kt)("inlineCode",{parentName:"td"},"app_read"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"app_logs"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"app_exec")),(0,i.kt)("td",{parentName:"tr",align:null},"Perform an exec into a running application")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"app_portforward")),(0,i.kt)("td",{parentName:"tr",align:null},"Open a tunnel with the ",(0,i.kt)("inlineCode",{parentName:"td"},"port-forward")," command")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"app")),(0,i.kt)("td",{parentName:"tr",align:null},"All the above",(0,i.kt)("br",null),"Depends on: ",(0,i.kt)("inlineCode",{parentName:"td"},"app_read"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"app_logs"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"app_write"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"app_exec"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"app_portforward"))))),(0,i.kt)("h3",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"These actions enable operations on Configuration commands and resources. Be aware that to bind a configuration you still need the ",(0,i.kt)("inlineCode",{parentName:"p"},"app_write")," permission as well."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Action ID"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"configuration_read")),(0,i.kt)("td",{parentName:"tr",align:null},"Read permissions (list, show)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"configuration_write")),(0,i.kt)("td",{parentName:"tr",align:null},"Write permissions (create, delete)",(0,i.kt)("br",null),"Depends on: ",(0,i.kt)("inlineCode",{parentName:"td"},"configuration_read"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"configuration")),(0,i.kt)("td",{parentName:"tr",align:null},"All the above",(0,i.kt)("br",null),"Depends on: ",(0,i.kt)("inlineCode",{parentName:"td"},"configuration_read"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"configuration_write"))))),(0,i.kt)("h3",{id:"service"},"Service"),(0,i.kt)("p",null,"These actions enable operations on Service commands and resources. "),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Action ID"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"service_read")),(0,i.kt)("td",{parentName:"tr",align:null},"Read permissions (list, show)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"service_write")),(0,i.kt)("td",{parentName:"tr",align:null},"Write permissions (create, delete, bind, unbind)",(0,i.kt)("br",null),"Depends on: ",(0,i.kt)("inlineCode",{parentName:"td"},"service_read"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"service_portforward")),(0,i.kt)("td",{parentName:"tr",align:null},"Open a tunnel with the ",(0,i.kt)("inlineCode",{parentName:"td"},"port-forward")," command")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"service")),(0,i.kt)("td",{parentName:"tr",align:null},"All the above",(0,i.kt)("br",null),"Depends on: ",(0,i.kt)("inlineCode",{parentName:"td"},"service_read"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"service_write"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"service_portforward"))))),(0,i.kt)("h3",{id:"gitconfig"},"Gitconfig"),(0,i.kt)("p",null,"These actions enable operations on Gitconfig commands and resources."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Action ID"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"gitconfig_read")),(0,i.kt)("td",{parentName:"tr",align:null},"Read permissions (list, show)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"gitconfig_write")),(0,i.kt)("td",{parentName:"tr",align:null},"Write permissions (create, delete)",(0,i.kt)("br",null),"Depends on: ",(0,i.kt)("inlineCode",{parentName:"td"},"gitconfig_read"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"gitconfig")),(0,i.kt)("td",{parentName:"tr",align:null},"All the above",(0,i.kt)("br",null),"Depends on: ",(0,i.kt)("inlineCode",{parentName:"td"},"gitconfig_read"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"gitconfig_write"))))),(0,i.kt)("h3",{id:"export-registries"},"Export Registries"),(0,i.kt)("p",null,"This action enable operations on Export Registries commands and resources. Only read operations are available."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Action ID"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"export_registries_read")),(0,i.kt)("td",{parentName:"tr",align:null},"Read permissions")))),(0,i.kt)("h2",{id:"assign-namespaces"},"Assign namespaces"),(0,i.kt)("p",null,"The authorized user's namespaces are an additional ",(0,i.kt)("inlineCode",{parentName:"p"},"namespaces")," field in the Secret data, separated by a newline ",(0,i.kt)("inlineCode",{parentName:"p"},"\\n"),".",(0,i.kt)("br",{parentName:"p"}),"\n","To modify them edit just that field:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'cat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Secret\ntype: BasicAuth\nmetadata:\n  labels:\n    epinio.io/api-user-credentials: "true"\n    epinio.io/roles: "user,admin:foobar"\n  name: my-epinio-user\n  namespace: epinio\nstringData:\n  username: myuser\n  password: "\\$2a\\$10\\$6bCi5NMstMK781In7JGiL.B44pgoplUb330FQvm6mVXMppbXBPiXS"\n  namespaces: |\n    workspace\n    workspace2\nEOF\n')))}c.isMDXComponent=!0}}]);